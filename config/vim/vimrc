set encoding=utf-8
scriptencoding utf-8

set fileencoding=utf-8
if &compatible
	set nocompatible
endif


"""""""""""""
" ¬ªPlugins¬´ "
"""""""""""""

let g:loaded_matchit=1

function! PackInit() abort
packadd minpac
call minpac#init({'verbose': 3})
call minpac#add('k-takata/minpac', {'type': 'opt'})
	" Real plugins
	call minpac#add('editorconfig/editorconfig-vim')
	call minpac#add('tpope/vim-repeat')
	call minpac#add('tpope/vim-surround')
	call minpac#add('justinmk/vim-sneak')
	call minpac#add('romainl/vim-qf')
	call minpac#add('haya14busa/vim-asterisk')
	call minpac#add('haya14busa/is.vim')
	call minpac#add('kana/vim-textobj-user')
	call minpac#add('kana/vim-textobj-line')
	" QOL
	call minpac#add('andymass/vim-matchup')
	call minpac#add('ctrlpvim/ctrlp.vim')
	call minpac#add('dense-analysis/ale', {'type': 'opt'})
	call minpac#add('dstein64/vim-startuptime', {'type': 'opt'})
	call minpac#add('thinca/vim-quickrun', {'type': 'opt'})
	call minpac#add('https://git.sansfontieres.com/~romi/eleline.vim')
	call minpac#add('mattn/emmet-vim', {'type': 'opt'})
	call minpac#add('equalsraf/neovim-gui-shim')
	" Syntax Highlighting
	call minpac#add('vim-scripts/SyntaxRange')
	call minpac#add('vim-jp/vim-cpp')
	call minpac#add('fatih/vim-go', {'type': 'opt'})
	call minpac#add('plasticboy/vim-markdown')
	call minpac#add('rust-lang/rust.vim')
	call minpac#add('pangloss/vim-javascript')
	call minpac#add('google/vim-jsonnet')
	call minpac#add('tbastos/vim-lua')
	call minpac#add('leafgarland/typescript-vim')
	call minpac#add('vim-ruby/vim-ruby')
	call minpac#add('vim-erlang/vim-erlang-runtime')
	call minpac#add('elixir-editors/vim-elixir')
	call minpac#add('slashmili/alchemist.vim')
	call minpac#add('neovimhaskell/haskell-vim')
	call minpac#add('davidoc/taskpaper.vim')
	call minpac#add('lifepillar/vim-colortemplate')
	call minpac#add('ziglang/zig.vim')
endfunction
filetype plugin indent on
syntax enable


command! PackUpdate call PackInit() | call minpac#update()
command! PackClean call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()


" lazy-lazyload
command! -nargs=* Startuptime :packadd vim-startuptime | StartupTime <f-args>
command! -nargs=* QuickRun :packadd vim-quickrun | QuickRun <f-args>
command! LazyDev :packadd ale
augroup PackLazy
	autocmd!
	autocmd FileType colortemplate packadd vim-colortemplate
	autocmd FileType html,css,scss,eruby,etlua,gohtmltmpl packadd emmet-vim
	autocmd FileType go packadd vim-go
augroup END


" Markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1
let g:jsx_ext_required=0


" ALE
let g:ale_disable_lsp=1
let g:ale_sign_error='‚úò '
let g:ale_sign_warning='‚Äº '
let g:ale_set_loclist=0
let g:ale_set_quickfix=1
let g:ale_fix_on_save=1
let g:ale_fixers={
	\'c': ['clang-format'],
	\'go': ['gofmt'],
	\'pascal': ['ptop'],
	\'haskell': ['brittany'],
	\'lua': ['lua-format'],
	\'elixir': ['mix_format'],
	\'ruby': ['rubocop'],
	\'erb': ['erubi'],
	\'css': ['prettier'],
	\'html': ['prettier'],
	\'javascript': ['eslint'],
\}
let g:ale_javascript_prettier_options='--config ~/.prettierrc'
let g:ale_css_prettier_options='--config ~/.prettierrc'
let g:ale_pascal_ptop_options='-c "$HOME"/.ptop.cfg'

" incsearch
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)


" eleline
let g:eleline_powerline_fonts = 1


" Vista
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "ùñã",
\   "variable": "ùñù",
\		"default":  "ùñé",
\  }

" CtrlP

" ¬ªGeneral¬´

" Update like normal human
set autoread


" SILENCE
set belloff=all

" Remember things
set backupdir=$HOME/.vim/cache/backup
set directory=$HOME/.vim/cache/swap
set viewdir=$HOME/.vim/cache/view
set undodir=$HOME/.vim/cache/undo
if !has('nvim')
	set viminfofile=$HOME/.vim/cache/viminfo
endif
set history=100


" Normal human clipboard
set clipboard^=unnamed,unnamedplus
set pastetoggle=<F2>


" Normal human backspace
set backspace=indent,eol,start


" Normal human search
set hlsearch
set incsearch
set ignorecase
set smartcase
set path+=**


" Better (arguably) grep
set grepprg=rg\ --vimgrep\ --smart-case


" Normal human mouse
set mouse=a


" Normal human buffers
set hidden
set splitright


" Superhuman smart (jk, still normal human)
set complete-=i
set smarttab
set autoindent
set formatoptions+=j


" Normal human increments
set nrformats-=octal


" Indent wrapped lines
set breakindent


" Not normal human regex, just normal regex
set magic

" Various metalines
set laststatus=2
set noshowmode
set showtabline=2


" Line numbers
set relativenumber


" Show cursor
set cursorline


" Some breathing room around cursor's line
set scrolloff=3


" Command completion
set wildmenu
set wildmode=longest,list,full
set wildignorecase


" Skip useless redraws
set lazyredraw


" I don't want my gutter to move around
set signcolumn=yes


" Viewing whitespaces
set listchars=tab:‚îÉ\ ,space:¬∑,nbsp:‚ê£,trail:‚Ä¢

" Split separator
set fillchars=vert:‚îÇ
	

" Filetype preferences
augroup FileTypes
	autocmd!
	autocmd FileType c setlocal et ts=2 sw=2 tw=80
	autocmd FileType h setlocal et ts=2 sw=2 tw=80
	autocmd FileType cpp setlocal et ts=2 sw=2 tw=80
	autocmd FileType pascal setlocal et ts=2 sw=2 tw=80
	autocmd FileType lua setlocal et ts=2 sw=2 tw=80
	autocmd FileType go setlocal noet ts=4 sw=4
	autocmd FileType sh setlocal et ts=2 sw=2
	autocmd BufRead,BufNewFile *.js setlocal et ts=2 sw=2
	autocmd FileType html setlocal et ts=2 sw=2
	autocmd FileType gohtmltmpl setlocal et ts=2 sw=2
	autocmd FileType etlua setlocal et ts=2 sw=2
	autocmd FileType moon setlocal et ts=2 sw=2
	autocmd FileType ruby setlocal et ts=2 sw=2
	autocmd FileType css setlocal et ts=2 sw=2
	autocmd FileType scss setlocal et ts=2 sw=2
	autocmd FileType yaml setlocal et ts=2 sw=2
	autocmd FileType markdown setlocal tw=80 et ts=2 sw=2
	autocmd FileType text setlocal noet ts=2 sw=2 tw=80
	autocmd FileType typescript setlocal et ts=2 sw=2
	autocmd FileType typescriptreact setlocal et ts=2 sw=2
	autocmd FileType python setlocal et ts=2 sw=2
	autocmd BufNewFile,BufRead *.ms set syntax=python ts=2 sw=2 noet
	autocmd FileType mail setlocal noautoindent
	autocmd FileType gmi set wrap linebreak
	autocmd FileType vim setlocal noet ts=2 sw=2
augroup END
let g:pascal_fpc=1
let g:c_syntax_for_h = 1


" I want to spell like a normal human
nnoremap <leader>ds :set spell!<CR>:set spell?<CR>
nnoremap <leader>dfr :set spelllang=fr<CR>
nnoremap <leader>den :set spelllang=en_gb<CR>


" light completion
set omnifunc=syntaxcomplete#Complete


""""""""""""""
" ¬ªMappings¬´ "
""""""""""""""

let mapleader="\<space>"
let maplocalleader="\<space>"
inoremap jk  <Esc>


" Save like a normal human
noremap <C-S> :update<CR>
inoremap <C-S> <C-O>:update<CR>
vnoremap <C-S> <C-C>:update<CR>


" Insert empty line like a normal human
nnoremap <CR> o<Esc>


" Move lines like a normal human
nnoremap <C-Down> :m .+1<CR>==
nnoremap <C-Up> :m .-2<CR>==
vnoremap <C-Down> :m '>+1<CR>gv=gv
vnoremap <C-Up> :m '<-2<CR>gv=gv


" Enable whitespace viewing
nnoremap <silent> <leader>w :set list!<CR>


" Quickfix/Location list
function! QfToggle()
    if getqflist({'winid' : 0}).winid
        cclose
    else
        copen
    endif
endfunction
nnoremap <silent> <C-J> :cnext<CR>
nnoremap <silent> <C-K> :cprev<CR>
nnoremap <silent> <C-D> :call QfToggle()<CR>

" Easier command line access & remap for Sneak
nnoremap : ;
nnoremap ; :
map \ <plug>Sneak_;


" GUI specific
nnoremap <silent> <leader>0 :set columns=180<CR>

" Buffer/Tabs management
nnoremap <leader>p :bp<CR>
nnoremap <leader>n :bn<CR>
nnoremap <silent><leader><C-w> :bd!<CR>
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt


" File browsing
nnoremap <leader>- :Fern . -drawer -toggle -keep<CR>

" Tab browsing
nnoremap <leader>= :Vista!!<CR>


" Open my taskaper
nnoremap <leader>tas :tabnew \| e $HOME/todo/now.taskpaper<CR>


" Cancel & resume Visual
vnoremap c <esc>v


" Launch build
function! BuildScript()
	set makeprg=./build.sh
	set errorformat=%f:%l:%m
endfunction
noremap <F3> :Make<CR>
inoremap <F3> :Make<CR>


" Windows VMWare/Gvim setup
if has('gui_win32')
	command! Remote
				\ let g:ale_command_wrapper='plink -i %UserProfile%\.ssh\sf@XOK9.win.putty.ppk -batch r@kato %*'
	let g:netrw_cygwin = 0
	let g:netrw_silent = 1
	let g:netrw_list_cmd ='plink -i '.$UserProfile.'\\.ssh\\sf@XOK9.win.putty.ppk -batch r@kato ls -Fa '
	let g:netrw_ssh_cmd  ='plink -batch -T -ssh'
	let g:netrw_scp_cmd  ='pscp -i '.$UserProfile.'\\.ssh\\sf@XOK9.win.putty.ppk -q'
	let g:netrw_sftp_cmd ='psftp -i '.$UserProfile.'\\.ssh\\sf@XOK9.win.putty.ppk'
endif

" netrw as a panel
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_banner = 0
let g:netrw_altv = 1
let g:netrw_winsize = 20
nnoremap <leader><Tab> :Vexplore<CR>


""""""""""""""""""
" ¬ªGUI Settings¬´ "
""""""""""""""""""


if has('gui_running')
	set guioptions-=T " I don‚Äôt know why I have to
	set guioptions-=m " use multiple lines for
	set guioptions-=r " gvim win32
	set guioptions-=L
	set lines=999
endif
if has('gui_macvim')
	set guifont=PragmataProLiga-Regular:h11
	set guioptions-=e
	set macligatures
elseif has('gui_win32')
	set guifont=PragmataPro_Mono_Liga:h11:cANSI
	set linespace=0
	set ffs=unix,dos
	set shellslash
elseif has('gui_gtk2')
	set guifont=PragmataPro\ Liga\ 12
	" Experimental ligatures
	let g:gtk_nocache=[0x00000000, 0xfc00ffff,0xf8000001, 0x78000001]
endif
if (has('termguicolors'))
	set termguicolors
endif

colorscheme hito
